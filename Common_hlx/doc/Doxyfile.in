PROJECT_NAME           = "@CMAKE_PROJECT_NAME@"
#PROJECT_NUMBER         = @VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@
#STRIP_FROM_PATH        = @PROJECT_SOURCE_DIR@ \
#                         @PROJECT_BINARY_DIR@

OUTPUT_DIRECTORY       = @CMAKE_CURRENT_BINARY_DIR@/doxygen/

#INPUT                  = @CMAKE_CURRENT_SOURCE_DIR@/Common/include \
#                         @CMAKE_CURRENT_SOURCE_DIR@/Common/src \
#                         @CMAKE_CURRENT_SOURCE_DIR@/Analysis/include \
#                         @CMAKE_CURRENT_SOURCE_DIR@/Analysis/src \
#                         @CMAKE_CURRENT_SOURCE_DIR@/DataOps/include \
#                         @CMAKE_CURRENT_SOURCE_DIR@/DataOps/src \
#                         @CMAKE_CURRENT_SOURCE_DIR@/Geometry/include \
#                         @CMAKE_CURRENT_SOURCE_DIR@/Geometry/src \
#                         @CMAKE_CURRENT_SOURCE_DIR@/doc

INPUT = @CMAKE_CURRENT_SOURCE_DIR@/Common \
        @CMAKE_CURRENT_SOURCE_DIR@/Analysis \
        @CMAKE_CURRENT_SOURCE_DIR@/DataOps \
        @CMAKE_CURRENT_SOURCE_DIR@/Geometry \
        @CMAKE_CURRENT_SOURCE_DIR@/Display \

# Omit these patterns from the recursion
EXCLUDE_PATTERNS      = */extern/* \
                        */*build*/* \


# The RECURSIVE tag can be used to turn specify whether or not subdirectories
# should be searched for input files as well. Possible values are YES and NO.
# If left blank NO is used.
RECURSIVE              = YES

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen
# will interpret the first line (until the first dot) of a JavaDoc-style
# comment as the brief description. If set to NO, the JavaDoc
# comments will behave just like regular Qt-style comments
# (thus requiring an explicit @brief command for a brief description.)
JAVADOC_AUTOBRIEF      = YES

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want
# to include (a tag file for) the STL sources as input, then you should
# set this tag to YES in order to let doxygen match functions declarations and
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.
# func(std::string) {}). This also makes the inheritance and collaboration
# diagrams that involve STL classes more complete and accurate.
BUILTIN_STL_SUPPORT    = YES

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in
# documentation are documented, even if no documentation was available.
# Private class members and static file members will be hidden unless
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES
EXTRACT_ALL            = YES

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class
# will be included in the documentation.
EXTRACT_PRIVATE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file
# will be included in the documentation.
EXTRACT_STATIC         = YES

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)
# defined locally in source files will be included in the documentation.
# If set to NO only classes defined in header files are included.
EXTRACT_LOCAL_CLASSES  = NO

# Turn off Latex output
GENERATE_LATEX         = NO